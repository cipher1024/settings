;; (load "~/.emacs.d/lisp/PG/generic/proof-site")

(use-package proof-general
  :mode ("\\.v\\'" . coq-mode)
  :ensure t
  ;; :config
  ;; (setq coq-prog-args '(
  ;;                       "-R" "/Users/simon/lean/VST/compcert" "-as" "compcert"
  ;;                       "-R" "/Users/simon/lean/VST/msl" "-as" "msl"
  ;;                       "-R" "/Users/simon/lean/VST/veric" "-as" "veric"
  ;;                       "-R" "/Users/simon/lean/VST/floyd" "-as" "floyd"
  ;;                       "-R" "/Users/simon/lean/VST/progs" "-as" "progs"
  ;;                       "-R" "/Users/simon/lean/VST/sepcomp" "-as" "sepcomp"
  ;;                       "-emacs"
  ;;                       )))
  :init (call-process "sh" nil nil "~/.opam/opam-init/init.sh"))
;; (coq-autodetect-version)
;; (call-process "opam" nil nil "switch coq-8.10")
;; (call-process "eval" nil nil "$(opam env)")

(use-package fill-column-indicator
  :ensure t)
;; (unload-feature 'company-coq t)
;; (unload-feature 'coq-mode t)
(use-package company-coq
  :ensure t
  :after proof-general
  :config
  (add-hook
    'coq-mode-hook
    (lambda ()
      ;; (fci-mode)
      ;; (company-mode)
      ;; (company-coq-mode)
      ;; (company-coq-initialize)
      ;; (set-fill-column 120)
      ;; (company-coq-features/prettify-symbols 0)
      (prettify-symbols-mode)
      ;; (setq coq-compile-before-require t)
      (setq coq-one-command-per-line nil)
      ;; (when (bound-and-true-p whitespace-mode)
      ;;   ;; (whitespace-mode)
      ;;   (whitespace-turn-off)
      ;;   )
      (whitespace-turn-off)
      ))
  (add-hook 'coq-mode-hook
          (lambda ()
            (setq-local prettify-symbols-alist
                        '((":=" . ?‚âú)
                          ;; ("Proof." . ?‚àµ) ("Qed." . ?‚ñ†)
                          ;; ("Defined." . ?‚ñ°) ("Time" . ?‚è±) ("Admitted." . ?üò±)
                          ("Alpha" . ?Œë) ("Beta" . ?Œí) ("Gamma" . ?Œì)
                          ("Delta" . ?Œî) ("Epsilon" . ?Œï) ("Zeta" . ?Œñ)
                          ("Eta" . ?Œó) ("Theta" . ?Œò) ("Iota" . ?Œô)
                          ("Kappa" . ?Œö) ("Lambda" . ?Œõ) ("Mu" . ?Œú)
                          ("Nu" . ?Œù) ("Xi" . ?Œû) ("Omicron" . ?Œü)
                          ("Pi" . ?Œ†) ("Rho" . ?Œ°) ("Sigma" . ?Œ£)
                          ("Tau" . ?Œ§) ("Upsilon" . ?Œ•) ("Phi" . ?Œ¶)
                          ("Chi" . ?Œß) ("Psi" . ?Œ®) ("Omega" . ?Œ©)
                          ("alpha" . ?Œ±) ("beta" . ?Œ≤) ("gamma" . ?Œ≥)
                          ("delta" . ?Œ¥) ("epsilon" . ?Œµ) ("zeta" . ?Œ∂)
                          ("eta" . ?Œ∑) ("theta" . ?Œ∏) ("iota" . ?Œπ)
                          ("kappa" . ?Œ∫) ("lambda" . ?Œª) ("mu" . ?Œº)
                          ("nu" . ?ŒΩ) ("xi" . ?Œæ) ("omicron" . ?Œø)
                          ("pi" . ?œÄ) ("rho" . ?œÅ) ("sigma" . ?œÉ)
                          ("tau" . ?œÑ) ("upsilon" . ?œÖ) ("phi" . ?œÜ)
                          ("chi" . ?œá) ("psi" . ?œà) ("omega" . ?œâ)))))
)

;; project-eshell
(setq proof-three-window-mode-policy 'hybrid)

;VST coqpaths
;; (custom-set-variables '(coq-prog-args '(
;; "-R" "/Users/simon/lean/VST/compcert" "-as" "compcert"
;; "-R" "/Users/simon/lean/VST/msl" "-as" "msl"
;; "-R" "/Users/simon/lean/VST/veric" "-as" "veric"
;; "-R" "/Users/simon/lean/VST/floyd" "-as" "floyd"
;; "-R" "/Users/simon/lean/VST/progs" "-as" "progs"
;; "-R" "/Users/simon/lean/VST/sepcomp" "-as" "sepcomp"
;; "-emacs"
;; )))

;; (setq coq-load-path '(("/Users/simon/lean/VST/compcert" "compcert")
;;                   ("/Users/simon/lean/VST/msl" "msl")
;;                   ("/Users/simon/lean/VST/veric" "veric")
;;                   ("/Users/simon/lean/VST/floyd" "floyd")
;;                   ("/Users/simon/lean/VST/progs" "progs")
;;                   ("/Users/simon/lean/VST/sepcomp" "sepcomp") ))

;; Iris
;; Input of unicode symbols
(require 'math-symbol-lists)
; Automatically use math input method for Coq files
(add-hook 'coq-mode-hook (lambda () (set-input-method "math")))
(add-hook 'coq-mode-hook (yas-minor-mode))
(add-hook 'coq-mode-hook (company-coq-mode))
; Input method for the minibuffer
(defun my-inherit-input-method ()
  "Inherit input method from `minibuffer-selected-window'."
  (let* ((win (minibuffer-selected-window))
         (buf (and win (window-buffer win))))
    (when buf
      (activate-input-method (buffer-local-value 'current-input-method buf)))))
(add-hook 'minibuffer-setup-hook #'my-inherit-input-method)
; Define the actual input method
(quail-define-package "math" "UTF-8" "Œ©" t)
(quail-define-rules ; add whatever extra rules you want to define here...
 ("\\fun"    ?Œª)
 ("\\mult"   ?‚ãÖ)
 ("\\ent"    ?‚ä¢)
 ("\\valid"  ?‚úì)
 ("\\diamond" ?‚óá)
 ("\\box"    ?‚ñ°)
 ("\\bbox"   ?‚ñ†)
 ("\\later"  ?‚ñ∑)
 ("\\pred"   ?œÜ)
 ("\\and"    ?‚àß)
 ("\\or"     ?‚à®)
 ("\\comp"   ?‚àò)
 ("\\ccomp"  ?‚óé)
 ("\\all"    ?‚àÄ)
 ("\\ex"     ?‚àÉ)
 ("\\to"     ?‚Üí)
 ("\\sep"    ?‚àó)
 ("\\lc"     ?‚åú)
 ("\\rc"     ?‚åù)
 ("\\Lc"     ?‚é°)
 ("\\Rc"     ?‚é§)
 ("\\lam"    ?Œª)
 ("\\empty"  ?‚àÖ)
 ("\\Lam"    ?Œõ)
 ("\\Sig"    ?Œ£)
 ("\\-"      ?‚àñ)
 ("\\aa"     ?‚óè)
 ("\\af"     ?‚óØ)
 ("\\auth"   ?‚óè)
 ("\\frag"   ?‚óØ)
 ("\\iff"    ?‚Üî)
 ("\\gname"  ?Œ≥)
 ("\\incl"   ?‚âº)
 ("\\latert" ?‚ñ∂)
 ("\\update" ?‚áù)

 ;; accents (for iL√∂b)
 ("\\\"o" ?√∂)

 ;; subscripts and superscripts
 ("^^+" ?‚Å∫) ("__+" ?‚Çä) ("^^-" ?‚Åª)
 ("__0" ?‚ÇÄ) ("__1" ?‚ÇÅ) ("__2" ?‚ÇÇ) ("__3" ?‚ÇÉ) ("__4" ?‚ÇÑ)
 ("__5" ?‚ÇÖ) ("__6" ?‚ÇÜ) ("__7" ?‚Çá) ("__8" ?‚Çà) ("__9" ?‚Çâ)

 ("__a" ?‚Çê) ("__e" ?‚Çë) ("__h" ?‚Çï) ("__i" ?·µ¢) ("__k" ?‚Çñ)
 ("__l" ?‚Çó) ("__m" ?‚Çò) ("__n" ?‚Çô) ("__o" ?‚Çí) ("__p" ?‚Çö)
 ("__r" ?·µ£) ("__s" ?‚Çõ) ("__t" ?‚Çú) ("__u" ?·µ§) ("__v" ?·µ•) ("__x" ?‚Çì)
)
(mapc (lambda (x)
        (if (cddr x)
            (quail-defrule (cadr x) (car (cddr x)))))
      (append math-symbol-list-basic math-symbol-list-extended))
