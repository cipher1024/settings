(setq lean-rename-table
      '(("io.print" . "IO.Print")
        ("unit" . "Unit")
        ("io.fs" . "IO.Fs")
        ("Messages_here" . "messagesHere")
        ("elaborator_state" . "ElaboratorState")
        ("message" . "Message")
        ("parsec.position" . "Parsec.Position")
        ("file_map" . "FileMap")
        ("message_log" . "MessageLog")
        ("single_file_state" . "SingleFileState")
        ("processed_file" . "ProcessedFile")
        ("syntax" . "Syntax")
        ("syntax_ident" . "SyntaxIdent")
        ("task" . "Task")
        ("diagnostic" . "Diagnostic")
        ("list" . "List")
        ("Json_number" . "JsonNumber")
        ("sum" . "Sum")
        ("option" . "Option")
        ("diagnostic_related_information" . "DiagnosticRelatedInformation")
        ("diagnostic_severity" . "DiagnosticSeverity")
        ("to_Nat" . "toNat")
        ("range" . "Range")
        ("document_uri" . "DocumentUri")
        ("â„•" . "Nat")
        ("string" . "String")
        ("to_json" . "toJson")
        ("json" . "Json")
        ("from_json" . "fromJson")
        ("from_json" . "FromJson")
        ("has_from_json" . "HasFromJson")
        ("has_to_json" . "HasToJson")
        ("nat" . "Nat")))

(setq coq-project-list
      '(("coq-cpo" . "~/Coq/coq-cpo")
        ("htt" . "~/Coq/htt")
        ("iris" . "~/Coq/iris")))

(setq cpp-project-list
      '(("lean-prover" . "~/lean/lean-master/")))

(setq current-projects
      '(("Thesis  / temporal-logic" "~/lean/temporal-logic" . lean)
        ("Weever  / ProcessServer" "~/weever/ProcessServer/" . haskell)
        ("TLA+    / quickcheck" "~/Documents/Haskell/specifica" . haskell)
        ("Haskell / Lean" "~/Documents/Haskell/lean/" . haskell)
        ("Thesis  / Dissertation" "~/org-mode/thesis/" . thesis)
        ("TLA+    / TLA-mode" "~/.emacs.d/tla-setup.el" . file)))

(setq lean-project-list
      '(("lambda-2" . "~/lean/lambda-2/")
        ("knuth-morris-pratt" . "~/lean/knuth-morris-pratt/")
        ("asm" . "~/lean/asm/")
        ("proving-for-fun" . "~/lean/proving-for-fun/")
        ("lean-pl" . "~/lean/lean-pl/")
        ("turing" . "~/lean/turing/")
        ("lean-local-cache" . "~/lean/lean-local-cache")
        ("lambda-calc" . "~/lean/lambda-calc/")
        ("AdventOfLean" . "~/lean/AdventOfLean/")
        ("qpf" . "~/lean/qpf")
        ("smt-lean" . "~/lean/smt-lean/")
        ("concrete-semantics" . "~/lean/concrete-semantics/")
        ("intervals" . "~/lean/intervals/")
        ("pac-man" . "~/lean/pac-man/")
        ("monoidal-categories-reboot" . "~/lean/monoidal-categories-reboot")
        ("call_cc" . "~/lean/call_cc/")
        ("data-types" . "~/lean/data-types")
        ("code-extraction" . "~/lean/code-extraction/")
        ("electrolysis" . "~/lean/electrolysis")
        ("modal" . "~/lean/modal/")
        ("daily-prover" . "~/lean/daily-prover/")
        ("tfae" . "~/lean/tfae/")
        ("kbb" . "~/lean/kbb")
        ("mathlib-nursery" . "~/lean/mathlib-nursery/")
        ("lean-serial" . "~/lean/lean-serial/")
        ("phaos" . "~/lean/phaos/")
        ("lean-perfectoid-spaces" . "~/lean/lean-perfectoid-spaces")
        ("lean-mode-contrib" . "~/lean/lean-mode-contrib")
        ("lean-protocol-support" . "~/lean/lean-protocol-support")
        ("quotient_groups" . "~/lean/quotient_groups")
        ("dsss18" . "~/lean/dsss18")
        ("programming_in_lean" . "~/lean/programming_in_lean")
        ("lean-tlc" . "~/lean/lean-tlc")
        ("pygments-main" . "~/lean/pygments-main")
        ("sf-lean" . "~/lean/sf-lean")
        ("local-langlands-abelian" . "~/lean/local-langlands-abelian")
        ("torus" . "~/lean/torus")
        ("sccache-lean" . "~/lean/sccache")
        ("lean-sf" . "~/lean/lean-sf/")
        ("software-foundations-book" . "~/lean/software-foundations-book")
        ("kremlin" . "~/lean/kremlin")
        ("lean-mode" . "~/lean/lean-mode")
        ("tactics" . "~/lean/tactics/")
        ("showdown" . "~/lean/lets-prove-leftpad/lean")
        ("transport" . "~/lean/transport/")
        ("unit-b" . "~/lean/unity/semantics-lean/src")
        ("modexp" . "~/lean/modexp")
        ("refine-tutorial" . "~/lean/tutorials/writing a tactic")
        ("temporal-logic" . "~/lean/temporal-logic")
        ("separation-logic" . "~/lean/separation-logic")
        ("lean-lib" . "~/lean/lean-lib")
        ("pipes" . "~/lean/pipes")
        ("lens" . "~/lean/lens")
        ("lean4" . "~/lean/lean4")
        ("unitb-pointers" . "~/lean/unitb-pointers")
        ("lean-prover" . "~/lean/lean-master/")
        ("slim_check" . "~/lean/slim_check/")
        ("mathlib" . "~/lean/mathlib/")
        ("mathlib-apply" . "~/lean/mathlib-apply/")
        ("lean-depot" . "~/lean/lean-depot/")
        ("scratch" . "~/lean/draft/")
        ("diff-topo" . "~/lean/lean-differential-topology")))

(setq rust-project-list
      '(("elan" . "~/rust/elan")
        ("olean-rs" . "~/rust/olean-rs/")
        ("sccache" . "~/rust/sccache/")))

(setq lean-library-list
      '(("qpf" . "avigad/qpf")
        ("monoidal-categories-reboot" . "https://github.com/mjendrusch/monoidal-categories-reboot")
        ("lean-category-theory" . "https://github.com/semorrison/lean-category-theory")
        ("qelim" . "https://github.com/skbaek/qelim")
        ("mathlib-nursery" . "leanprover-community/mathlib-nursery")
        ("separation-logic" . "unitb/separation-logic")
        ("xena" . "kbuzzard/xena")
        ("mathlib" . "leanprover/mathlib")
        ("mathlib-cipher1024" . "cipher1024/mathlib")
        ("lean-lib" . "unitb/lean-lib")))

(setq haskell-project-list
      '(("pandoc-unlit" . "~/Documents/Haskell/pandoc-unlit/")
        ("my-xattrs" . "~/Documents/Haskell/my-xattrs/")
        ("flycheck-tool" . "~/Documents/Haskell/flycheck-tool/")
        ("lean" . "~/Documents/Haskell/lean/")
        ("c2hs" . "~/Documents/Haskell/c2hs/")
        ("lean-bindings" . "~/Documents/Haskell/lean-haskell-bindings/")
        ("VLC" . "~/Documents/Haskell/VLC/")
        ("Toggl" . "~/Documents/Haskell/TogglAPI")
        ("TLA+" . "~/Documents/Haskell/specifica")
        ("Literate Unit-B" . "~/Documents/Haskell/Literate Unit-B/GitHub/literate-unitb-complete/")
        ("reactive-pipes" . "~/Documents/Haskell/reactive-pipes/")))

(setq project-list-file-contents
      '(lean-rename-table coq-project-list cpp-project-list current-projects lean-project-list rust-project-list lean-library-list haskell-project-list))
